---
import "@/styles/globals.css";
import { db, eq, and, Event, Participant, Image } from "astro:db";
import { nanoid } from "nanoid";
import { CircleAlert } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { getPreferredLocale, getTranslations } from "@/utils/i18n.ts";
import { formatDateParts } from "@/utils/temporal.ts";

import Layout from "@/components/custom/layout.astro";
import Banner from "@/components/custom/banner.astro";
import Header from "@/components/custom/header.astro";
import Label from "@/components/custom/label.astro";
import DateTime from "@/components/utils/date-time.astro";
import ResponseButtons from "@/components/custom/response-buttons.astro";
import CalendarButtons from "@/components/custom/calendar-buttons.astro";
import ParticipantsList from "@/components/custom/participants-list.astro";

const { slug } = Astro.params;
if (!slug) return;

const event = await db.select().from(Event).where(eq(Event.id, slug)).get();
if (!event) return;

// Get cookie and try to find previously given response
const cookie = Astro.cookies.get("savedate")?.value;
const participant = cookie
    && await db.select().from(Participant).where(
        and(
            eq(Participant.eventId, event.id),
            eq(Participant.cookie, cookie)
        )
    ).get();

// For non-admin participants, automatically redirect to previous response
if (participant && !participant.isAdmin) {
    return Astro.redirect(`/participant/${participant.id}`);
}

if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const { name, response } = Object.fromEntries(data.entries());
        
        if (typeof name === "string" && typeof response === "string") {
            const participant = await db.insert(Participant).values({
                id: nanoid(24),
                eventId: event.id,
                name: name,
                response: response,
                isAdmin: false,
                createdDate: new Date(),
                cookie: cookie
            }).returning().get();

            return Astro.redirect(`/participant/${participant.id}`);
        }
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
    }
}

const image = event.imageId
    && await db.select().from(Image).where(eq(Image.id, event.imageId)).get();

const locale = getPreferredLocale(Astro.request.headers);
const date = formatDateParts(locale, event.startDate, event.startTime, event.timezone);
const i18n = getTranslations(locale);
---

<Layout title={event.name} description={event.description ?? event.name} locale={locale}>
    <meta slot="head" property="og:title" content={event.name}>
    <meta slot="head" property="og:description" content={event.description}>
    <meta
        slot="head"
        property="og:image"
        content={encodeURI(`${Astro.url.origin}/api/og.png?date=${date}&name=${event.name}&description=${event.description}&icon=${event.icon}&imageId=${event.imageId}`)}
    />
    <meta slot="head" property="og:image:type" content="image/png" />
    <meta slot="head" property="og:image:width" content="1200" />
    <meta slot="head" property="og:image:height" content="630" />
    <Banner>
        {image &&
            <img slot="image" src={image.dataURL} />
        }
        <div slot="icon">
            {event.icon}
        </div>
    </Banner>
    <main class="flex flex-col gap-12 my-16 mx-auto px-6 max-w-xl">
        <section class="flex flex-col gap-8">
            <div class="space-y-2">
                <DateTime
                    class="text-gray-400"
                    date={event.startDate}
                    time={event.startTime}
                    timezone={event.timezone}
                ></DateTime>
                <Header
                    title={event.name}
                    description={event.description}
                ></Header>
            </div>
            {participant && participant.isAdmin &&
                <Alert>
                    <CircleAlert className="h-4 w-4" />
                    <AlertTitle>{i18n("note")}</AlertTitle>
                    <AlertDescription>
                        <span>{i18n("your-invitation-note")}</span>
                        <a
                            href={`/participant/${participant.id}`}
                            class="underline underline-offset-4 text-blue-500"
                        >
                            {i18n("open-invitation")} â†’
                        </a>
                    </AlertDescription>
                </Alert>
            }
            {event.allowResponse
                ? <form class="flex flex-col gap-8" method="POST">
                    <Label text={i18n("your-name")}>
                        <Input name="name" />
                    </Label>
                    <Label text={i18n("participate")} tag="div">
                        <ResponseButtons />
                    </Label>
                </form>
                : <Label text={i18n("add-to-calendar")} tag="div">
                    <CalendarButtons event={event} linktext={i18n("view-invite")} />
                </Label>
            }
        </section>
        {event.allowResponse && event.participantsVisible &&
            <hr />
            <ParticipantsList eventId={event.id} />
        }
    </main>
</Layout>

<script>
    const nameInput = document.querySelector<HTMLInputElement>("[name='name']");
    if (nameInput) nameInput.value = localStorage.getItem("participant-name") ?? String();

    document.querySelector("form")?.addEventListener("submit", () => {
        localStorage.setItem("participant-name", nameInput?.value ?? String());

        // Add timeout to prevent form not being submitted with disabled buttons
        requestAnimationFrame(() => {
            document.querySelectorAll("button").forEach(button => button.disabled = true);
        });
    });
</script>
