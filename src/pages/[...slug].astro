---
import "@/styles/globals.css";
import { db, eq, Event, Participant } from "astro:db";
import { nanoid } from "nanoid";
import { CircleAlert } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { getPreferredLocale, getTranslations } from "@/utils/i18n.ts";
import { formatDateParts } from "@/utils/temporal.ts";

import Navbar from "@/components/custom/navbar.astro";
import DateTime from "@/components/utils/date-time.astro";
import ResponseButtons from "@/components/custom/response-buttons.astro";
import CalendarButtons from "@/components/custom/calendar-buttons.astro";
import ParticipantsList from "@/components/custom/participants-list.astro";

const { slug } = Astro.params;
if (!slug) return;

const event = await db.select().from(Event).where(eq(Event.id, slug)).get();
if (!event) return;

if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const { name, response } = Object.fromEntries(data.entries());
        
        if (typeof name === "string" && typeof response === "string") {
            const participant = await db.insert(Participant).values({
                id: nanoid(24),
                eventId: event.id,
                name: name,
                response: response,
                isAdmin: false,
                createdDate: new Date()
            }).returning().get();

            return Astro.redirect(`/participant/${participant.id}`);
        }
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
    }
}

const locale = getPreferredLocale(Astro.request.headers);
const date = formatDateParts(locale, event.startDate, event.startTime, event.timezone);
const i18n = getTranslations(locale);
---

<html>
    <head>
        <meta charset="utf-8" />
        <meta name="description" content={event.description}>
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
        <meta name="generator" content={Astro.generator} />
        <meta property="og:title" content={event.name}>
        <meta property="og:description" content={event.description}>
        <meta
            property="og:image"
            content={encodeURI(`${Astro.url.origin}/api/og?date=${date}&name=${event.name}&description=${event.description}&icon=${event.icon}`)}
        />
        <meta property="og:image:type" content="image/png" />
        <meta property="og:image:width" content="1200" />
        <meta property="og:image:height" content="630" />
        <title>{event.name}</title>
    </head>
    <body>
        <Navbar></Navbar>
        <header class="relative block w-full h-40 bg-slate-50">
            <div class="mx-auto px-6 max-w-xl">
                <span class="absolute bottom-0 text-6xl translate-y-[50%]">
                    {event.icon}
                </span>
            </div>
        </header>
        <main class="flex flex-col gap-12 my-16 mx-auto px-6 max-w-xl" data-event={event.id}>
            <section class="flex flex-col gap-8">
                <header class="flex flex-col gap-2">
                    <div>
                        <div class="flex text-gray-400">
                            <DateTime
                                date={event.startDate}
                                time={event.startTime}
                                timezone={event.timezone}
                            ></DateTime>
                        </div>
                        <h1 class="text-4xl font-medium">
                            {event.name}
                        </h1>
                    </div>
                    {event.description &&
                        <p class="text-lg text-gray-500 whitespace-pre-line">
                            {event.description}
                        </p>
                    }
                </header>
                <Alert id="invitation-answered-alert" className="hidden">
                    <CircleAlert className="h-4 w-4" />
                    <AlertTitle>{i18n("note")}</AlertTitle>
                    <AlertDescription>
                        <span>{i18n("invitation-answered-note")}</span>
                        <a href="#" class="underline underline-offset-4 text-blue-500">
                            {i18n("open-answer")} â†’
                        </a>
                    </AlertDescription>
                </Alert>
                {event.allowResponse
                    ? <form class="flex flex-col gap-8" method="POST">
                        <label class="flex flex-col gap-2">
                            <p>{i18n("your-name")}</p>
                            <Input name="name" />
                        </label>
                        <div class="flex flex-col gap-2">
                            <p>{i18n("participate")}</p>
                            <ResponseButtons />
                        </div>
                    </form>
                    : <div class="flex flex-col gap-2">
                        <p>{i18n("add-to-calendar")}</p>
                        <CalendarButtons event={event} linktext={i18n("view-invite")} />
                    </div>
                }
            </section>
            {event.allowResponse && event.participantsVisible &&
                <hr />
                <ParticipantsList eventId={event.id} />
            }
        </main>
    </body>
</html>

<script>
    const nameInput = document.querySelector("[name='name']") as HTMLInputElement;
    nameInput.value = localStorage.getItem("participant-name") ?? String();

    document.querySelector("form")?.addEventListener("submit", () => {
        localStorage.setItem("participant-name", nameInput.value);

        // Add timeout to prevent form not being submitted with disabled buttons
        requestAnimationFrame(() => {
            document.querySelectorAll("button").forEach(button => button.disabled = true);
        });
    });

    // Use locale storage to identify previously answered invitations and show hint accordingly
    // This could also be implemented via a cookie-based approach, storing assignment server-side
    const event = document.querySelector("main")?.dataset.event;
    const participant = event && localStorage.getItem(event);
    if (participant) {
        const alert = document.querySelector("#invitation-answered-alert");
        const anchor = alert?.querySelector("a") as HTMLAnchorElement;

        anchor.href = `${location.origin}/participant/${participant}`;
        alert?.classList.remove("hidden");
    }
</script>
