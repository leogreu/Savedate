---
import "@/styles/globals.css";
import { db, eq, Event, Participant, Image } from "astro:db";
import { CircleCheck, Share } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Toggle } from "@/components/ui/toggle";
import { Toaster } from "@/components/ui/toaster";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { defaultLocale, getPreferredLocale, getTranslations, getClientTranslations } from "@/utils/i18n.ts";
import { formatDateParts } from "@/utils/temporal.ts";

import Layout from "@/components/custom/layout.astro";
import Banner from "@/components/custom/banner.astro";
import Header from "@/components/custom/header.astro";
import Label from "@/components/custom/label.astro";
import DateTime from "@/components/utils/date-time.astro";
import ResponseButtons from "@/components/custom/response-buttons.astro";
import CalendarButtons from "@/components/custom/calendar-buttons.astro";
import ParticipantsList from "@/components/custom/participants-list.astro";

const { slug } = Astro.params;
if (!slug) return;

let participant = await db.select().from(Participant).where(eq(Participant.id, slug)).get();
if (!participant) return;

let event = await db.select().from(Event).where(eq(Event.id, participant.eventId)).get();
if (!event) return;

let hideElements: string[] | undefined;
if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const response = formData.get("response");
    const preview = formData.get("preview");

    if (typeof response === "string") {
        participant = await db.update(Participant).set({ response }).where(eq(Participant.id, slug)).returning().get();
    } else if (typeof preview === "string") {
        const previewOptions = (event.previewOptions as Record<string, unknown>);
        hideElements = (previewOptions.hideElements ??= []) as string[];
        
        if (hideElements.includes(preview)) {
            const index = hideElements.indexOf(preview);
            if (index >= 0) hideElements.splice(index, 1);
        } else {
            hideElements.push(preview);
        }

        event.previewOptions = previewOptions;
        event = await db.update(Event).set(event).where(eq(Event.id, event.id)).returning().get();
    }
}

const image = event.imageId
    && await db.select().from(Image).where(eq(Image.id, event.imageId)).get();

const locale = getPreferredLocale(Astro.request.headers) ?? defaultLocale;
const i18n = getTranslations(locale);
---

<Layout title={event.name} description={event.description ?? event.name} locale={locale}>
    <Banner>
        {image &&
            <img slot="image" src={image.dataURL} />
        }
        {event.icon &&
            <div slot="icon">
                {event.icon}
            </div>
        }
    </Banner>
    <main
        class="flex flex-col gap-12 my-16 mx-auto px-6 max-w-xl"
        data-translations={JSON.stringify(getClientTranslations(locale))}
    >
        <section class="flex flex-col gap-8">
            <div class="space-y-2">
                <DateTime
                    class="text-gray-400"
                    date={event.startDate}
                    time={event.startTime}
                    timezone={event.timezone}
                ></DateTime>
                <Header
                    title={event.name}
                    description={event.description}
                ></Header>
            </div>
            <Alert>
                <CircleCheck className="h-4 w-4" />
                <AlertTitle>{i18n("success")}</AlertTitle>
                <AlertDescription>
                    {i18n(participant.isAdmin
                        ? "invite-creation-success"
                        : "answer-send-success"
                    )}
                </AlertDescription>
            </Alert>
            {participant.isAdmin &&
                <Label text={i18n("invitation-link")}>
                    <div id="share" class="flex gap-2">
                        <Input value={`${Astro.url.origin}/${event.id}`} readOnly />
                        <Button variant="outline" size="icon">
                            <Share size={16} className="w-12"></Share>
                        </Button>
                    </div>
                </Label>
            }
            <Label text={i18n("add-to-calendar")} help={i18n("add-to-calendar-help")} tag="div">
                <!-- Currently, only a participation response can be edited -->
                <CalendarButtons
                    event={event}
                    linktext={i18n(participant.isAdmin ? "view-invite" : "view-edit-invite")}
                />
            </div>
        </section>
        {event.allowResponse && (event.participantsVisible || participant.isAdmin) &&
            <hr />
            <ParticipantsList eventId={event.id} participantId={participant.id} />
        }
        {participant.isAdmin &&
            <hr />
            <section id="link-preview" class="flex flex-col gap-4">
                <h2 class="text-2xl font-medium">
                    {i18n("link-preview")}
                </h2>
                <p class="text-base text-gray-500">
                    {i18n("link-preview-subtitle")}
                </p>
                <img class="rounded-lg" src={encodeURI(`${Astro.url.origin}/api/og.jpeg?date=${formatDateParts(locale, event.startDate, event.startTime, event.timezone)}&name=${event.name}&description=${event.description}&icon=${event.icon ?? ""}&imageId=${event.imageId ?? ""}`)} />
                <form class="flex gap-2" method="POST">
                    {["date", "name", "description"].map(element =>
                        <Toggle
                            type="submit"
                            name="preview"
                            className="w-full"
                            variant="outline"
                            value={element}
                            data-state={hideElements?.includes(element) ? "on" : "off"}
                            client:idle
                        >
                            {i18n(element)}
                        </Toggle>
                    )}
                </form>
            </section>
        }
        {!participant.isAdmin &&
            <hr />
            <form class="flex flex-col gap-4" method="POST">
                <h2 class="text-2xl font-medium">
                    {i18n("edit-response")}
                </h2>
                <p class="text-base text-gray-500">
                    {i18n("edit-response-subtitle")}
                </p>
                <ResponseButtons highlight={participant.response} />
            </form>
        }
    </main>
    <Toaster client:idle></Toaster>
</Layout>

<script>
    import { toast } from "@/components/ui/use-toast";

    document.querySelector("#share input")?.addEventListener("click", event => {
        addToClipboard((event.target as HTMLInputElement).value);
    });

    document.querySelector("#share button")?.addEventListener("click", () => {
        const url = document.querySelector<HTMLInputElement>("#share input")?.value;

        // On iOS Safari, WhatsApp does not fully load OG preview images
        if (navigator.share && !navigator.userAgent.match(/Version\/\d+.+Safari/)) {
            navigator.share({ url });
        } else if (url) {
            addToClipboard(url);
        }
    });

    const translations = JSON.parse(document.querySelector("main")?.dataset.translations ?? "");
    const addToClipboard = (value: string) => {
        navigator.clipboard.writeText(value);
        toast({ title: translations["client-link-clipboard-success"] });
    }
</script>
