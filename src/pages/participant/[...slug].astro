---
import "@/styles/globals.css";
import { CircleCheck, Share, X } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Toaster } from "@/components/ui/toaster";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, } from "@/components/ui/table";

import { db, eq, Event, Participant } from "astro:db";

const { slug } = Astro.params;
if (!slug) return;

const participant = await db.select().from(Participant).where(eq(Participant.id, slug)).get();
if (!participant) return;

const event = await db.select().from(Event).where(eq(Event.id, participant.eventId)).get();
if (!event) return;

const participants = await db.select().from(Participant).where(eq(Participant.eventId, event.id));

// TODO: Add reusable Layout component
// TODO: Evaluate whether to use Container for main component (also for creation form)
// TODO: Probably also add a reusable Label component
// TODO: Probably add Temporal API polyfill and only store startDate / endDate with optional time
---

<html>
    <head>
        <meta charset="utf-8" />
        <meta name="description" content={event.description}>
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
        <meta name="generator" content={Astro.generator} />
        <title>{event.name}</title>
    </head>
    <body>
        <header class="relative block w-full h-40 bg-slate-50">
            <div class="mx-auto px-6 max-w-xl">
                <span class="absolute bottom-0 text-6xl translate-y-[50%]">
                    {event.icon}
                </span>
            </div>
        </header>
        <main class="flex flex-col gap-12 my-16 mx-auto px-6 max-w-xl">
            <section class="flex flex-col gap-8">
                <header class="flex flex-col gap-2">
                    <div>
                        <!-- TODO: Add reusable component to show time, and probably reuse for add-to-calendar -->
                        <div class="flex text-gray-400">
                            <p>{new Date(event.startDate).toLocaleDateString(Astro.preferredLocale)}</p>
                            {event.startTime &&
                                <p>, {event.startTime}</p>
                            }
                        </div>
                        <h1 class="text-4xl font-medium text-gray-700">
                            {event.name}
                        </h1>
                    </div>
                    {event.description &&
                        <p class="text-lg text-gray-500">
                            {event.description}
                        </p>
                    }
                </header>
                <Alert>
                    <CircleCheck className="h-4 w-4" />
                    <AlertTitle>Erfolg</AlertTitle>
                    <AlertDescription>
                        {participant.isAdmin
                            ? "Dein Termin wurde erfolgreich erstellt! Du kannst nun den Link über das Teilen-Menü verschicken."
                            : "Deine Antwort wurde erfolgreich übermittelt."
                        }
                    </AlertDescription>
                </Alert>
                {participant.isAdmin &&
                    <label class="flex flex-col gap-2">
                        <p>Link</p>
                        <div id="share" class="flex gap-2">
                            <Input value={`${Astro.url.origin}/${event.id}`} readOnly />
                            <Button variant="outline" size="icon">
                                <Share size={16} className="w-12"></Share>
                            </Button>
                        </div>
                    </label>
                }
                <Button id="add-to-calendar">In Kalender speichern</Button>
                <time id="start-date" class="hidden" datetime={event.startDate}></time>
                <time id="end-date" class="hidden" datetime={event.startDate}></time>
                <time id="start-time" class="hidden" datetime={event.startTime}></time>
                <time id="end-time" class="hidden" datetime={event.endTime}></time>
                <input id="timezone" class="hidden" value={event.timezone}></time>
            </section>
            {(participant.isAdmin || event.participantsVisible) &&
                <hr>
                <section class="flex flex-col gap-4">
                    <h2 class="text-2xl font-medium text-gray-700">
                        Teilnehmer
                    </h2>
                    <p class="text-base text-gray-500">
                        Hier siehst du eine Liste aller Personen, die deine Einladung angenommen oder abgelehnt haben.
                    </p>
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>Name</TableHead>
                                <TableHead>Antwort vom</TableHead>
                                <TableHead>Teilname</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {participants.map((entry) => (
                                <TableRow key={entry.id}>
                                    <TableCell>
                                        {entry.id === participant.id
                                            ? "Du"
                                            : entry.isAdmin
                                                ? "Veranstalter"
                                                : (entry.name || "Kein Name")
                                        }
                                    </TableCell>
                                    <TableCell>
                                        {entry.createdDate.toLocaleString(Astro.preferredLocale)}
                                        </TableCell>
                                    <TableCell>
                                        {entry.willParticipate
                                            ? <CircleCheck className="h-4 w-4"></CircleCheck>
                                            : <X className="h-4 w-4"></X>
                                        }
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </section>
            }
        </main>
        <Toaster client:load></Toaster>
    </body>
</html>

<script>
    import { toast } from "@/components/ui/use-toast";
    import { atcb_action } from "add-to-calendar-button";

    document.querySelector("#share button")?.addEventListener("click", () => {
        const url = document.querySelector<HTMLInputElement>("#share input")?.value;
        if (navigator.share) {
            navigator.share({ url });
        } else {
            navigator.clipboard.writeText(url ?? String());
            toast({
                title: "Link in die Zwischenablage kopiert."
            });
        }
    });

    document.querySelector("#add-to-calendar")?.addEventListener("click", () => {
        atcb_action({
            name: document.title,
            description: document.querySelector('meta[name="description"]')?.getAttribute("content") ?? "",
            startDate: document.querySelector<HTMLTimeElement>("time#start-date")?.dateTime,
            endDate: document.querySelector<HTMLTimeElement>("time#end-date")?.dateTime,
            startTime: document.querySelector<HTMLTimeElement>("time#start-time")?.dateTime,
            endTime: document.querySelector<HTMLTimeElement>("time#end-time")?.dateTime,
            timeZone: document.querySelector<HTMLInputElement>("#timezone")?.value
        });
    });
</script>
