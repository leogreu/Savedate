---
import "@/styles/globals.css";
import { db, Event, Participant } from "astro:db";
import { nanoid } from "nanoid";
import { ArrowLeft } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { getTranslations } from "@/utils/i18n.ts";
import Navbar from "@/components/navigation/navbar.astro";

const defaultIcon = "ðŸŽ‰";

if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const { name, description, date, time, icon, timezone, visible } = Object.fromEntries(data.entries());
        
        if (typeof name === "string" && typeof date === "string") {
            const event = await db.insert(Event).values({
                id: nanoid(8),
                name: name,
                description: typeof description === "string" ? description : null,
                icon: icon && typeof icon === "string" ? icon : defaultIcon,
                startDate: date,
                endDate: date,
                startTime: typeof time === "string" ? time : null,
                endTime: typeof time === "string" ? time : null,
                timezone: time && typeof timezone === "string" ? timezone : null,
                participantsVisible: visible ? true : false,
                createdDate: new Date()
            }).returning().get();

            const participant = await db.insert(Participant).values({
                id: nanoid(24),
                eventId: event.id,
                isAdmin: true,
                willParticipate: true,
                createdDate: new Date()
            }).returning().get();

            return Astro.redirect(`/participant/${participant.id}`);
        }
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
    }
}

const i18n = getTranslations(Astro.preferredLocale);
---

<html>
    <head>
        <meta charset="utf-8" />
        <meta name="description" content={i18n("index-description")}>
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
        <meta name="generator" content={Astro.generator} />
        <title>{i18n("new-invitation")} | Savedate</title>
    </head>
    <body>
        <Navbar></Navbar>
        <header class="relative block w-full h-40 bg-slate-50">
            <div class="mx-auto px-6 max-w-xl">
                <div class="absolute flex items-center gap-6 bottom-0 translate-y-[50%]">
                    <button id="emoji-button" class="text-6xl">
                        {defaultIcon}
                    </button>
                    <div id="emoji-tooltip" class="
                        flex gap-2 items-center px-2 py-1 border border-gray-200 text-xs bg-white rounded-lg
                        animate-in fade-in slide-in-from-right-2 duration-1000 [animation-delay:5s] fill-mode-both
                    ">
                        <ArrowLeft size="14"></ArrowLeft>
                        <span>{i18n("click-to-edit")}</span>
                    </div>
                </div>
            </div>
        </header>
        <form class="flex flex-col gap-8 my-16 mx-auto px-6 max-w-xl" method="POST">
            <!-- TODO: Probably add a reusable header component -->
            <header class="flex flex-col gap-6">
                <h1 class="text-4xl font-medium text-gray-700">
                    {i18n("new-invitation")}
                </h1>
                <p class="text-lg text-gray-500">
                    {i18n("new-invitation-subtitle")}
                </p>
            </header>
            <label class="flex flex-col gap-2">
                <p>{i18n("name")}</p>
                <Input name="name" required />
            </label>
            <label class="flex flex-col gap-2">
                <p>{i18n("description")}</p>
                <Textarea name="description"></Textarea>
                <p class="text-xs text-gray-500">{i18n("optional")}</p>
            </label>
            <div class="flex gap-2">
                <label class="flex flex-col gap-2 w-full">
                    <p>{i18n("date")}</p>
                    <Input name="date" type="date" required />
                </label>
                <label class="flex flex-col gap-2">
                    <p>{i18n("time")}</p>
                    <Input name="time" type="time" />
                    <p class="text-xs text-gray-500">{i18n("optional")}</p>
                </label>
            </div>
            <hr>
            <label class="flex justify-between items-center">
                <p>{i18n("participants-visible-label")}</p>
                <Switch name="visible" client:idle></Switch>
            </label>
            <input class="hidden" name="icon" />
            <input class="hidden" name="timezone" />
            <Button type="submit">{i18n("save")}</Button>
        </form>
        <dialog id="emoji-dialog" class="rounded-lg"></dialog>
    </body>
</html>

<script>
    import { Picker } from "emoji-mart";

    // Set the timezone client-side to get the actual user timezone
    const timezoneInput = document.querySelector<HTMLInputElement>("[name='timezone']");
    if (timezoneInput) timezoneInput.value = Intl.DateTimeFormat().resolvedOptions().timeZone;

    // Handling of user-selectable emojis
    const button = document.querySelector<HTMLButtonElement>("#emoji-button");
    const tooltip = document.querySelector<HTMLDivElement>("#emoji-tooltip");
    const dialog = document.querySelector<HTMLDialogElement>("#emoji-dialog");
    const input = document.querySelector<HTMLInputElement>("[name='icon']");

    let picker: Picker;
    button?.addEventListener("click", () => {
        if (!picker) {
            picker = new Picker({
                data: async () => {
                    const response = await import("@emoji-mart/data");
                    return response.default;
                },
                onEmojiSelect: ({ native }: { native: string }) => {
                    if (button) button.textContent = native;
                    if (input) input.value = native;
                    dialog?.close();
                },
                locale: navigator.language.split("-").at(0),
                previewPosition: "none",
                skinTonePosition: "none",
                navPosition: "none",
                theme: "light",
                maxFrequentRows: 0,
                perLine: 8
            });

            dialog?.append(picker as unknown as HTMLElement);
            tooltip?.classList.add("hidden");
        }

        dialog?.showModal();
    });

    dialog?.addEventListener("click", event => {
        if (event.target === dialog) {
            dialog.close();
        }
    });
</script>
