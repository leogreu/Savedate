---
import "@/styles/globals.css";
import { db, Event, Participant } from "astro:db";
import { nanoid } from "nanoid";
import { ArrowLeft } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { getPreferredLocale, getTranslations } from "@/utils/i18n.ts";

import Layout from "@/components/custom/layout.astro";
import Banner from "@/components/custom/banner.astro";
import Badge from "@/components/custom/badge.astro";
import Header from "@/components/custom/header.astro";
import Label from "@/components/custom/label.astro";

const defaultIcon = "ðŸŽ‰";

if (Astro.request.method === "POST") {
    const { name, description, startDate, startTime, endDate, endTime, icon, timezone, response, visible }
        = Object.fromEntries((await Astro.request.formData()).entries());

    try {
        if (typeof name === "string" && typeof startDate === "string") {
            const event = await db.insert(Event).values({
                id: nanoid(8),
                name: name,
                description: typeof description === "string" ? description : null,
                icon: icon && typeof icon === "string" ? icon : defaultIcon,
                startDate: startDate,
                startTime: typeof startTime === "string" ? startTime : null,
                endDate: typeof endDate === "string" ? endDate : startDate,
                endTime: typeof endTime === "string" ? endTime
                    : (typeof startTime === "string" ? startTime : null),
                timezone: startTime && typeof timezone === "string" ? timezone : null,
                allowResponse: response ? true : false,
                participantsVisible: response && visible ? true : false,
                createdDate: new Date()
            }).returning().get();

            const participant = await db.insert(Participant).values({
                id: nanoid(24),
                eventId: event.id,
                isAdmin: true,
                response: "yes",
                createdDate: new Date(),
                cookie: Astro.cookies.get("savedate")?.value
            }).returning().get();

            return Astro.redirect(`/participant/${participant.id}`);
        }
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
    }
}

// Used to provide a language-specific meta alternate link for SEO
const locale = Astro.url.searchParams.get("lang") ?? getPreferredLocale(Astro.request.headers);
const i18n = getTranslations(locale);
---

<Layout title={i18n("new-invitation")} description={i18n("index-description")} locale={locale}>
    <Banner>
        <div class="flex items-center gap-6">
            <button id="emoji-button">
                {defaultIcon}
            </button>
            <Badge
                id="emoji-tooltip"
                class="animate-in fade-in slide-in-from-right-2 duration-1000 [animation-delay:5s] fill-mode-backwards"
            >
                <ArrowLeft size="14"></ArrowLeft>
                <span class="hidden lg:block">{i18n("click-to-edit")}</span>
                <span class="lg:hidden">{i18n("tap-to-edit")}</span>
            </Badge>
        </div>
    </Banner>
    <form class="flex flex-col gap-8 my-16 mx-auto px-6 max-w-xl" method="POST">
        <Header
            title={i18n("new-invitation")}
            description={i18n("new-invitation-subtitle")}
        ></Header>
        <Label text={i18n("event-name")}>
            <Input name="name" required />
        </Label>
        <Label text={i18n("description")} help={i18n("optional")}>
            <Textarea name="description"></Textarea>
        </Label>
        <div class="flex flex-col gap-4">
            <div class="flex gap-2">
                <Label class="w-full" text={i18n("date")}>
                    <Input name="startDate" type="date" required />
                </Label>
                <Label text={i18n("time")} help={i18n("optional")}>
                    <Input name="startTime" type="time" />
                </Label>
            </div>
            <div id="end-date-container" class="flex gap-2 items-end hidden">
                <Label class="w-full" text={i18n("end")}>
                    <Input name="endDate" type="date" />
                </Label>
                <Label>
                    <Input name="endTime" type="time" />
                </Label>
            </div>
        </div>
        <hr />
        <label class="flex justify-between items-center">
            <p class="font-medium">
                {i18n("allow-response-label")}
            </p>
            <Switch name="response" client:idle></Switch>
        </label>
        <label id="visible-container" class="flex justify-between items-center hidden">
            <p class="font-medium">
                {i18n("participants-visible-label")}
            </p>
            <Switch name="visible" client:idle></Switch>
        </label>
        <input class="hidden" name="icon" />
        <input class="hidden" name="timezone" />
        <Button type="submit">{i18n("save")}</Button>
    </form>
    <dialog id="emoji-dialog" class="rounded-lg"></dialog>
</Layout>

<script>
    import { Temporal } from "temporal-polyfill";
    import { Picker } from "emoji-mart";

    // Get elements required for further processing
    const get = (query: string) => document.querySelector(query);
    const startDate = get("[name='startDate']") as HTMLInputElement;
    const startTime = get("[name='startTime']") as HTMLInputElement;
    const endDate = get("[name='endDate']") as HTMLInputElement;
    const endTime = get("[name='endTime']") as HTMLInputElement;
    const timezoneInput = get("[name='timezone']") as HTMLInputElement;
    const emojiButton = get("#emoji-button") as HTMLButtonElement;
    const emojiTooltip = get("#emoji-tooltip") as HTMLDivElement;
    const emojiDialog = get("#emoji-dialog") as HTMLDialogElement;
    const emojiInput = get("[name='icon']") as HTMLInputElement;

    // Set the start date and timezone client-side to get the actual user data
    startDate.value = Temporal.Now.plainDateISO().toString();
    timezoneInput.value = Intl.DateTimeFormat().resolvedOptions().timeZone;

    // On start date and time input, show end inputs
    for (const input of [startDate, startTime]) {
        input.addEventListener("input", () => {
            try {
                const plusOneHour = Temporal.Now
                    .zonedDateTimeISO()
                    .withPlainDate(startDate.value)
                    .withPlainTime(startTime.value)
                    .add({ hours: 1 });

                endDate.value = plusOneHour.toPlainDate().toString();
                endTime.value = plusOneHour.toPlainTime().toString();
                get("#end-date-container")?.classList.remove("hidden");
            } catch {
                endDate.value = String();
                endTime.value = String();
                get("#end-date-container")?.classList.add("hidden");
            }
        });
    }

    // Handling of user-selectable emojis
    let picker: Picker;
    emojiButton.addEventListener("click", () => {
        if (!picker) {
            picker = new Picker({
                data: async () => {
                    const response = await import("@emoji-mart/data");
                    return response.default;
                },
                onEmojiSelect: ({ native }: { native: string }) => {
                    emojiButton.textContent = native;
                    emojiInput.value = native;
                    emojiDialog.close();
                },
                locale: navigator.language.split("-").at(0),
                previewPosition: "none",
                skinTonePosition: "none",
                navPosition: "none",
                theme: "light",
                maxFrequentRows: 0,
                perLine: 8
            });

            emojiDialog.append(picker as unknown as HTMLElement);
            emojiTooltip.classList.add("hidden");
        }

        emojiDialog.showModal();
    });

    emojiDialog.addEventListener("click", event => {
        if (event.target === emojiDialog) {
            emojiDialog.close();
        }
    });

    // Only show participants visible switch when responses are enabled
    get("[name='response']")?.addEventListener("click", ({ target }) => {
        if (target instanceof HTMLInputElement && target.checked) {
            get("#visible-container")?.classList.remove("hidden");
        } else {
            get("#visible-container")?.classList.add("hidden");
        }
    });
</script>
