---
import "@/styles/globals.css";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea"
import { Switch } from "@/components/ui/switch";
import { db, Event, Participant } from "astro:db";

if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const { name, description, date, time, timezone } = Object.fromEntries(data.entries());
        
        if (typeof name === "string" && typeof date === "string") {
            const event = await db.insert(Event).values({
                id: crypto.randomUUID(),
                name: name,
                description: typeof description === "string" ? description : null,
                icon: "ðŸŽ‰",
                startDate: date,
                endDate: date,
                startTime: typeof time === "string" ? time : null,
                endTime: typeof time === "string" ? time : null,
                timezone: time && typeof timezone === "string" ? timezone : null,
                createdDate: new Date()
            }).returning().get();

            const participant = await db.insert(Participant).values({
                id: crypto.randomUUID(),
                eventId: event.id,
                isAdmin: true,
                willParticipate: true,
                createdDate: new Date()
            }).returning().get();

            return Astro.redirect(`/participant/${participant.id}`);
        }
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
    }
}
---

<html>
    <head>
        <meta charset="utf-8" />
        <meta name="description" content="Erstelle Termine und Einladungen in Sekunden und teile sie mit Freunden und Bekannten.">
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
        <meta name="generator" content={Astro.generator} />
        <title>Neuer Termin | Savedate</title>
    </head>
    <body>
        <header class="relative block w-full h-40 bg-slate-50">
            <div class="mx-auto px-6 max-w-xl">
                <button id="emoji-button" class="absolute bottom-0 text-6xl translate-y-[50%]">ðŸŽ‰</button>
                <dialog id="emoji-dialog" class="top-[200px] right-[200px]"></dialog>
            </div>
        </header>
        <form class="flex flex-col gap-8 my-16 mx-auto px-6 max-w-xl" method="POST">
            <!-- TODO: Probably add a reusable header component -->
            <header class="flex flex-col gap-6">
                <h1 class="text-4xl font-medium text-gray-700">
                    Neuer Termin
                </h1>
                <p class="text-lg text-gray-500">
                    Erstelle einen neuen Termin und teile ihn mit Freunden und Bekannten. Es wird keine Registrierung benÃ¶tigt.
                </p>
            </header>
            <label class="flex flex-col gap-2">
                <p>Name</p>
                <Input name="name" required />
            </label>
            <label class="flex flex-col gap-2">
                <p>Beschreibung</p>
                <Textarea name="description"></Textarea>
            </label>
            <div class="flex gap-2">
                <label class="flex flex-col gap-2 w-full">
                    <p>Datum</p>
                    <Input name="date" type="date" required />
                </label>
                <label class="flex flex-col gap-2">
                    <p>Uhrzeit</p>
                    <Input name="time" type="time" />
                </label>
            </div>
            <label class="flex justify-between">
                <p>Teilnehmer dÃ¼rfen andere Teilnehmer sehen</p>
                <Switch client:load disabled></Switch>
            </label>
            <input class="hidden" name="timezone" />
            <Button type="submit">Speichern</Button>
        </form>
    </body>
</html>

<script>
    import { Picker } from "emoji-mart";

    // Set the timezone client-side to get the actual user timezone
    const timezoneInput = document.querySelector<HTMLInputElement>("[name='timezone']");
    if (timezoneInput) timezoneInput.value = Intl.DateTimeFormat().resolvedOptions().timeZone;

    const button = document.querySelector<HTMLButtonElement>("#emoji-button");
    const dialog = document.querySelector<HTMLDialogElement>("#emoji-dialog");

    const picker = new Picker({
        data: async () => {
            const response = await import("@emoji-mart/data");
            return response.default;
        },
        onEmojiSelect: ({ native }: { native: string }) => {
            if (button) button.textContent = native;
        },
        previewPosition: "none",
        skinTonePosition: "none",
        navPosition: "none"
    });

    dialog?.append(picker as unknown as HTMLElement);
    button?.addEventListener("click", () => {
        dialog?.toggleAttribute("open");
    });
</script>
